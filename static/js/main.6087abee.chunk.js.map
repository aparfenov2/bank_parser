{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OA4JeA,MAZf,WACI,MAAwBC,WAAe,CACnC,MAAQ,GACR,OAAS,KAFb,mBAAOC,EAAP,KAIF,OAJE,KAKA,8BACI,8CAAiBA,EAAI,MAArB,OAAoCA,EAAI,aC3IjCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6087abee.chunk.js","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Slider from '@mui/material/Slider';\nimport axios from 'axios'\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction valuetext(value) {\n  return `${value}Â°C`;\n}\n\nconst minDistance = 10;\n\nfunction MinimumDistanceSlider() {\n\n  const [value2, setValue2] = React.useState([20, 37]);\n\n  const handleChange2 = (event, newValue, activeThumb) => {\n    if (!Array.isArray(newValue)) {\n      return;\n    }\n\n    if (newValue[1] - newValue[0] < minDistance) {\n      if (activeThumb === 0) {\n        const clamped = Math.min(newValue[0], 100 - minDistance);\n        setValue2([clamped, clamped + minDistance]);\n      } else {\n        const clamped = Math.max(newValue[1], minDistance);\n        setValue2([clamped - minDistance, clamped]);\n      }\n    } else {\n      setValue2(newValue);\n    }\n  };\n\n  return (\n    <Box sx={{ width: 300 }}>\n      <Slider\n        getAriaLabel={() => 'Minimum distance shift'}\n        value={value2}\n        onChange={handleChange2}\n        valueLabelDisplay=\"auto\"\n        getAriaValueText={valuetext}\n        disableSwap\n      />\n    </Box>\n  );\n}\n\nfunction ByDayTable(props) {\n    return (\n        <table class=\"cart\">\n        <thead>\n            <tr>\n            {['Mon','Tue','Wed','Thu','Fri','Sat','Sun'].forEach(h => {\n                return <td>{h}</td>\n            })}\n            </tr>\n        </thead>\n\n        <tbody>\n            {props.data.forEach(row => {\n                return (\n                    <tr>\n                        {row.forEach(r => {\n                            let [d,v,com] = r\n                            {d == null ? <td/>\n                            :\n                                    <td class=\"hasTooltip\">{d} <br/>{v}\n                                    {com != null && <span class=\"tooltip\">{com}</span>}\n                                    </td>\n                            }\n                        })}\n                    </tr>\n                )\n            })}\n        </tbody>\n    </table>\n    );\n}\n\nfunction zip_longest() {\n    var args = [].slice.call(arguments);\n    var longest = args.reduce(function(a,b){\n        return a.length>b.length ? a : b\n    }, []);\n\n    return longest.map(function(_,i){\n        return args.map(function(array){return array[i]})\n    });\n}\n\nfunction SummaryTable(data) {\n    return (\n        <table class=\"cart\">\n        <thead>\n            <tr>\n                {data['headers'].forEach(h => {\n                    return <td>{h}</td>\n                })}\n            </tr>\n        </thead>\n\n        <tbody>\n            {zip_longest(data['rows'], data['_com']).forEach(row_row_c => {\n                let [row, row_c] = row_row_c\n                return (\n                    <tr>\n                        {zip_longest(row, row_c != null ? row_c : []).forEach(v_com => {\n                            let [v,com] = v_com\n                            return (\n                                <td class=\"hasTooltip\">{v}\n                                {com != null && <span class=\"tooltip\">{com}</span>}\n                            </td>\n                            )\n                        })}\n                    </tr>\n                )\n            })}\n        </tbody>\n    </table>\n    )\n}\n\nfunction NavTable(data) {\n    return (\n        <table>\n            <tr>\n                <td> <a href=\"?after={data['prev_after']}&before={data['prev_before']}\">Prev Period {data['prev_after']} - {data['prev_before']}</a> </td>\n            </tr>\n            <tr>\n                <td> <a href=\"?after={data['next_after']}&before={data['next_before']}\">Next Period {data['next_after']} - {data['next_before']}</a> </td>\n            </tr>\n            <tr>\n                <td> <a href=\"/\">Last Period</a> </td>\n            </tr>\n            <tr>\n                <td> <a href=\"/upload\">Upload</a> </td>\n            </tr>\n        </table>\n    )\n}\n\n\nfunction App() {\n    const [data, setData] = React.useState({\n        'after':\"\",\n        'before':\"\"\n    });\n  return (\n    <div>\n        <center>Summary {data['after']} - ${data['before']}</center>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}